# Generated from lib/ruby_mod_kit/node/def_parent_node.rb with RBS::Inline

module RubyModKit
  module Node
    # Transpiler program node
    class DefParentNode < Node::BaseNode
      @prism_node: Prism::ClassNode | Prism::ModuleNode

      @body_node: Node::StatementsNode | nil

      @parent: Node::BaseNode

      @prev: Node::BaseNode | nil

      attr_reader prism_node: Prism::ClassNode | Prism::ModuleNode

      attr_reader parent: Node::BaseNode

      attr_reader prev: Node::BaseNode | nil

      # @rbs prism_node: Prism::ClassNode | Prism::ModuleNode
      # @rbs parent: Node::BaseNode
      # @rbs prev: Node::BaseNode | nil
      # @rbs return: void
      # @param prism_node [Prism::ClassNode, Prism::ModuleNode]
      # @param parent [Node::BaseNode]
      # @param prev [Node::BaseNode, nil]
      # @return [void]
      def initialize: (Prism::ClassNode | Prism::ModuleNode prism_node, parent: Node::BaseNode, ?prev: Node::BaseNode | nil) -> void

      # @rbs prism_child_node: Prism::Node
      # @rbs prev: Node::BaseNode | nil
      # @rbs return: Node::BaseNode
      # @param prism_child_node [Prism::Node]
      # @param prev [Node::BaseNode, nil]
      # @return [Node::BaseNode]
      def wrap: (Prism::Node prism_child_node, ?prev: Node::BaseNode | nil) -> Node::BaseNode

      # @rbs return: Node::StatementsNode | nil
      # @return [Node::StatementsNode, nil]
      def body_node: () -> (Node::StatementsNode | nil)
    end
  end
end
