# frozen_string_literal: true

# rbs_inline: enabled

module RubyModKit
  # The class of transpiler generation.
  class Memo
    getter @def_parents_memo: Hash[Integer, Memo::DefParent]
    getter @methods_memo: Hash[Integer, Memo::Method]
    getter @parameters_memo: Hash[Integer, Memo::Parameter]

    def initialize: void
      @def_parents_memo = {}
      @methods_memo = {}
      @parameters_memo = {}
    end

    def succ(OffsetDiff => offset_diff): void
      [@methods_memo, @parameters_memo, @def_parents_memo].each do |offset_node_memo|
        new_offset_node_memo = {}
        offset_node_memo.each_value do |node_memo|
          node_memo.succ(offset_diff)
          new_offset_node_memo[node_memo.offset] = node_memo
        end
        offset_node_memo.replace(new_offset_node_memo)
      end
      self
    end

    def def_parent_memo(Node::DefParentNode => def_parent_node): (Memo::DefParent)
      @def_parents_memo[def_parent_node.offset] ||= Memo::DefParent.new(def_parent_node)
    end

    def method_memo(Node::DefNode => def_node): (Memo::Method)
      @methods_memo[def_node.offset] ||= Memo::Method.new(def_node)
    end

    def parameter_memo(Node => node): (Memo::Parameter)
      memo = @parameters_memo[node.offset] ||= Memo::Parameter.new(node.offset)
      def_node = node.def_node_at(node.offset)
      raise RubyModKit::Error unless def_node.is_a?(Node::DefNode)

      method_memo(def_node).add_parameter(memo)
    end

    class << self
      def unify_type(String => type): String
        type[/\A\(([^()]*)\)\z/, 1] || type
      end
    end
  end
end

require_relative "memo/offset_memo"
require_relative "memo/def_parent"
require_relative "memo/ivar"
require_relative "memo/method"
require_relative "memo/parameter"
