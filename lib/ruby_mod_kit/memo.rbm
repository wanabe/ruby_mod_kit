# frozen_string_literal: true

# rbs_inline: enabled

module RubyModKit
  # The class of transpiler generation.
  class Memo
    @previous_error_messages: [String]
    @generation_num: Integer
    @methods_memo: Hash[Integer, Memo::Method]
    @parameters_memo: Hash[Integer, Memo::Parameter]

    attr_reader :previous_error_messages #: [String]
    attr_reader :generation_num #: Integer
    attr_reader :methods_memo #: Hash[Integer, Memo::Method]
    attr_reader :parameters_memo #: Hash[Integer, Memo::Parameter]

    def initialize: void
      @previous_error_messages = []
      @generation_num = 0
      @methods_memo = {}
      @parameters_memo = {}
    end

    def succ(OffsetDiff => offset_diff, ([String]) => @previous_error_messages): void
      [@methods_memo, @parameters_memo].each do |offset_node_memo|
        new_offset_node_memo = {}
        offset_node_memo.each_value do |node_memo|
          node_memo.succ(offset_diff)
          new_offset_node_memo[node_memo.offset] = node_memo
        end
        offset_node_memo.replace(new_offset_node_memo)
      end
      @generation_num += 1
      self
    end

    def method_memo(Node::DefNode => def_node): (Memo::Method)
      @methods_memo[def_node.offset] ||= Memo::Method.new(def_node)
    end

    def parameter_memo(Node::ParameterNode => node): (Memo::Parameter)
      memo = @parameters_memo[node.offset] ||= Memo::Parameter.new(node)
      method_memo(node.def_node).add_parameter(memo)
    end

    class << self
      # @rbs type: String
      # @rbs return: String
      def unify_type(type)
        type[/\A\(([^()]*)\)\z/, 1] || type
      end
    end
  end
end

require_relative "memo/offset_memo"
require_relative "memo/method"
require_relative "memo/parameter"
