# frozen_string_literal: true

# rbs_inline: enabled

module RubyModKit
  class Memo
    # The memo for parameter type
    class Method < NodeMemo
      UNTYPED = "untyped"

      @parent_offset: Integer
      @name: Symbol
      @parameters: Array[Parameter]
      @type: String

      attr_reader :parent_offset #: Integer
      attr_reader :name #: Symbol
      attr_reader :parameters #: Array[Parameter]
      attr_reader :type #: String

      def initialize(Node => node): void
        @type = UNTYPED
        @parameters = []
        @name = node.name
        raise RubyModKit::Error unless node.parent

        @parent_offset = node.parent.offset
        super
      end

      def add_parameter(Parameter => parameter_memo): (Memo::Parameter)
        @parameters << parameter_memo
        parameter_memo
      end

      def untyped?: bool
        @type == UNTYPED
      end

      def type=(String => type): void
        @type = Memo.unify_type(type)
      end
    end
  end
end
