# frozen_string_literal: true

module RubyModKit
  module Memo
    # The memo for parameter type
    class IvarMemo
      getter @type: (String | nil)
      getter @attr_kind: (Symbol | nil)
      accessor @offset: (Integer | nil)
      accessor @indent: String
      @name: Symbol
      accessor @visibility: (Symbol | nil)
      accessor @separator: String

      def initialize(@name): void
        @indent = ""
      end

      def type=(String => type): void
        @type = RubyModKit.unify_type(type)
      end

      def attr_kind=((Symbol | String) => kind): void
        case kind.to_sym
        when :attr_reader, :reader, :getter
          @attr_kind = :attr_reader
        when :attr_writer, :writer, :setter
          @attr_kind = :attr_writer
        when :attr_accessor, :accessor, :property
          @attr_kind = :attr_accessor
        end
      end

      def succ(OffsetDiff => offset_diff): void
        offset = @offset
        return unless offset

        @offset = offset_diff[offset]
      end
    end
  end
end
