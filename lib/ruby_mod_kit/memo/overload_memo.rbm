# frozen_string_literal: true

module RubyModKit
  module Memo
    # The memo for parameter type
    class OverloadMemo < OffsetMemo
      getter @name: Symbol
      getter @overload_types: [[Array[String], String]]
      @offset_corrected: bool
      @offset: Integer

      def initialize(Integer => offset, Symbol => @name): void
        @overload_types = []
        @offset_corrected = false
        super(offset)
      end

      def correct_offset(Node::ProgramNode => root_node): Integer
        return @offset if @offset_corrected

        node = root_node.def_node_at(@offset)&.prev
        raise RubyModKit::Error unless node.is_a?(Node::DefNode)

        @offset_corrected = true
        @offset = node.offset
      end

      def add_overload_type((Array[String]) => parameter_types, String => return_value_type): void
        @overload_types << [parameter_types, return_value_type]
      end
    end
  end
end
