# frozen_string_literal: true

# rbs_inline: enabled

require "prism"
require "sorted_set"

require "ruby_mod_kit/memo"
require "ruby_mod_kit/node"
require "ruby_mod_kit/mission"
require "ruby_mod_kit/mission/ivar_arg"
require "ruby_mod_kit/mission/type_parameter"
require "ruby_mod_kit/mission/fix_parse_error"
require "ruby_mod_kit/mission/overload"
require "ruby_mod_kit/offset_diff"

module RubyModKit
  # The class of transpiler generation.
  class Generation
    # @rbs @diffs: SortedSet[[Integer, Integer, Integer]]
    # @rbs @missions: Array[Mission]
    # @rbs @script: String

    attr_reader :parse_result #: Prism::ParseResult
    attr_reader :script #: String

    def initialize(String => @script, Array[Mission] => @missions: [], Memo => @memo: Memo.new): void
      @offset_diff = OffsetDiff.new
      @parse_result = Prism.parse(@script)
      @root_node = Node.new(@parse_result.value)
    end

    def first_generation? : bool
      @memo.generation_num == 0
    end

    def succ: Generation
      @missions.each do |mission|
        mission.succ(@offset_diff)
      end
      @memo.succ(@offset_diff, @parse_result.errors.map(&:message))
      Generation.new(
        @script,
        missions: @missions,
        memo: @memo,
      )
    end

    def resolve: void
      if first_generation?
        add_mission(Mission::FixParseError.new(0, ""))
      elsif !@parse_result.errors.empty? && @memo.previous_error_messages == @parse_result.errors.map(&:message)
        @parse_result.errors.each do |parse_error|
          warn(
            ":#{parse_error.location.start_line}:#{parse_error.message} (#{parse_error.type})",
            @parse_result.source.lines[parse_error.location.start_line - 1],
            "#{" " * parse_error.location.start_column}^#{"~" * [parse_error.location.length - 1, 0].max}",
          )
        end
        raise RubyModKit::Error, "Syntax error"
      end

      perform_missions
    end

    def completed?: bool
      @parse_result.errors.empty? && @missions.empty?
    end

    def []=(Integer => src_offset, Integer => length, String => str): String
      diff = str.length - length
      @script[@offset_diff[src_offset], length] = str
      @offset_diff.insert(src_offset, diff)
    end

    def [](Range[Integer] => src_range): String
      dst_range = Range.new(@offset_diff[src_range.first], @offset_diff[src_range.last], src_range.exclude_end?)
      @script[dst_range] || raise(RubyModKit::Error, "Invalid range")
    end

    def perform_missions: void
      @missions.delete_if do |mission|
        mission.perform(self, @root_node, @parse_result, @memo) || break
      end
    end

    def add_mission(Mission => mission): void
      @missions << mission
    end
  end
end
