# frozen_string_literal: true

# rbs_inline: enabled

module RubyModKit
  # The class of transpiler generation.
  class Generation
    getter @parse_result: Prism::ParseResult
    getter @script: String
    @missions: Array[Mission::BaseMission]
    @memo_pad: MemoPad
    @root_node: Node::ProgramNode
    @offset_diff: OffsetDiff
    @generation_num: Integer
    @filename: (String | nil)

    def initialize(@script, @missions: [], @memo_pad: MemoPad.new, @generation_num: 0, @filename: nil): void
      @offset_diff = OffsetDiff.new
      @parse_result = Prism.parse(@script)
      @root_node = Node::ProgramNode.new(@parse_result.value)
      init_missions
    end

    def init_missions: void
      return unless first_generation?

      add_mission(Mission::FixParseErrorMission.new)
      add_mission(Mission::TypeAttrMission.new)
      add_mission(Mission::OverloadMission.new)
      add_mission(Mission::TypeParameterMission.new)
      add_mission(Mission::TypeReturnMission.new)
    end

    def first_generation?: bool
      @generation_num == 0
    end

    def succ: Generation
      perform_missions
      @missions.each do |mission|
        mission.succ(@offset_diff)
      end
      @memo_pad.succ(@offset_diff)
      Generation.new(
        @script,
        missions: @missions,
        memo_pad: @memo_pad,
        generation_num: @generation_num + 1,
        filename: @filename,
      )
    end

    def name: String
      "#{@filename || "(eval)"}[gen #{@generation_num}]"
    end

    def completed?: bool
      @parse_result.errors.empty? && @missions.empty?
    end

    def []=(Integer => src_offset, Integer => length, String => str): String
      diff = str.length - length
      @script[@offset_diff[src_offset], length] = str
      @offset_diff.insert(src_offset, diff)
    end

    def [](Range[Integer] => src_range): String
      dst_range = Range.new(@offset_diff[src_range.first], @offset_diff[src_range.last], src_range.exclude_end?)
      @script[dst_range] || raise(RubyModKit::Error, "Invalid range")
    end

    def line(Integer => line_num): String
      offset = @offset_diff[@parse_result.source.offsets[line_num]]
      (@script.match(/.*\n?/, offset) && Regexp.last_match(0)) || raise(RubyModKit::Error)
    end

    def line(Node::BaseNode => node): String
      line(node.prism_node.location.start_line - 1)
    end

    def line(Prism::ParseError => parse_error): String
      line(parse_error.location.start_line - 1)
    end

    def src_offset(Integer => line_num): (Integer | nil)
      parse_result.source.offsets[line_num]
    end

    def src_offset(Prism::ParseError => parse_error): (Integer | nil)
      src_offset(parse_error.location.start_line - 1)
    end

    def perform_missions: void
      @missions.delete_if do |mission|
        mission.perform(self, @root_node, @parse_result, @memo_pad) || break
      end
    end

    def add_mission(Mission::BaseMission => mission): void
      @missions << mission
    end

    class << self
      def resolve(String => src, (String | nil) => filename: nil): Generation
        generation = Generation.new(src.dup, filename: filename)
        generation = generation.succ until generation.completed?
        generation
      end
    end
  end
end
