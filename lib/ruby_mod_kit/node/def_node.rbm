# frozen_string_literal: true

module RubyModKit
  module Node
    # Transpiler program node
    class DefNode < Node::BaseNode
      private getter @prism_node: Prism::DefNode
      getter @parent: (Node::BaseNode)
      getter @prev: (Node::BaseNode | nil)
      @body_node: (Node::StatementsNode | Node::BeginNode | nil)

      def initialize(@prism_node, @parent:, @prev: nil): void
        raise RubyModKit::Error unless prism_node.is_a?(Prism::DefNode)

        super()
      end

      def name: Symbol
        @prism_node.name
      end

      def body_location: (Prism::Location | nil)
        prism_node.body&.location
      end

      def lparen_loc: (Prism::Location | nil)
        @prism_node.lparen_loc
      end

      def rparen_loc: (Prism::Location | nil)
        @prism_node.rparen_loc
      end

      def name_loc: (Prism::Location)
        @prism_node.name_loc
      end

      def end_keyword_loc: (Prism::Location | nil)
        @prism_node.end_keyword_loc
      end

      def wrap(Prism::Node => prism_child_node, (Node::BaseNode | nil) => prev: nil): (Node::BaseNode)
        child_node = super
        if prism_child_node == @prism_node.body
          case child_node
          when Node::StatementsNode, Node::BeginNode
            @body_node = child_node
          end
        end
        child_node
      end

      def body_node: (Node::StatementsNode | Node::BeginNode | nil)
        # body_node will be set in #children
        children
        @body_node
      end
    end
  end
end
