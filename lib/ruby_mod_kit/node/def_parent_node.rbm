# frozen_string_literal: true

module RubyModKit
  module Node
    # Transpiler program node
    class DefParentNode < Node::BaseNode
      getter @prism_node: (Prism::ClassNode | Prism::ModuleNode)
      @body_node: (nil | Node::StatementsNode)
      getter @parent: (Node::BaseNode)
      getter @prev: (Node::BaseNode | nil)

      def initialize(@prism_node, @parent:, @prev: nil): void
        raise RubyModKit::Error if !prism_node.is_a?(Prism::ClassNode) && !prism_node.is_a?(Prism::ModuleNode)

        super()
      end

      def wrap(Prism::Node => prism_child_node, (Node::BaseNode | nil) => prev: nil): (Node::BaseNode)
        child_node = super
        @body_node = child_node if prism_child_node == @prism_node.body && child_node.is_a?(Node::StatementsNode)
        child_node
      end

      def body_node: (nil | Node::StatementsNode)
        # body_node will be set in #children
        children
        @body_node
      end
    end
  end
end
