# frozen_string_literal: true

# rbs_inline: enabled

module RubyModKit
  module Node
    # Transpiler program node
    class DefParentNode < Node::BaseNode
      getter @prism_node: (Prism::ClassNode | Prism::ModuleNode)
      @body_node: (nil | Node::StatementsNode)
      getter @parent: (Node::BaseNode)

      def initialize(@prism_node, @parent:): void
        raise RubyModKit::Error if !prism_node.is_a?(Prism::ClassNode) && !prism_node.is_a?(Prism::ModuleNode)

        super()
      end

      def body_node: (nil | Node::StatementsNode)
        return @body_node if defined?(@body_node)

        body_node = children.find { |node| node.prism_node == @prism_node.body }
        body_node = nil unless body_node.is_a?(Node::StatementsNode)
        @body_node = body_node
      end
    end
  end
end
