# frozen_string_literal: true

module RubyModKit
  class Feature
    class Type
      class RbsInline
        # The mission for parameter types
        class TypeOverloadMission < Mission
          def perform(Generation => generation, Node::ProgramNode => root_node, (Prism::ParseResult) => _parse_result, MemoPad => memo_pad): bool
            memo_pad.overloads_memo.each_value do |overload_memo|
              overload_memo.correct_offset(root_node)
              offset = overload_memo.offset
              def_node = root_node.def_node_at(offset) || raise(RubyModKit::Error)
              start_line = def_node.location.start_line - 1
              indent = generation.lines[start_line][/\A */] || ""
              offset -= indent.length

              annotation = +""
              overload_memo.overload_types.each do |parameter_types, return_type|
                annotation << if annotation.empty?
                  "# @rbs"
                else
                  "#    |"
                end
                annotation << " (#{parameter_types.join(", ")}) -> #{return_type}\n"
              end
              annotation.gsub!(/^/, indent)
              memo_pad.flags[:rbs_annotated] = true
              generation[offset, 0] = annotation
            end
            true
          end
        end
      end
    end
  end
end
