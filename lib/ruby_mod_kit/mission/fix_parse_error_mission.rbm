# frozen_string_literal: true

# rbs_inline: enabled

module RubyModKit
  module Mission
    # The mission for parameter types
    class FixParseErrorMission < Mission::BaseMission
      @previous_error_messages: Array[String]

      def initialize: void
        super(0)
        @previous_error_messages = []
        @correctors_error_map = {}
        correctors = [
          RubyModKit::Corrector::AllCorrector.new,
          RubyModKit::Corrector::ParameterArrowCorrector.new,
        ]
        correctors.each do |corrector|
          corrector.correctable_error_types.each do |error_type|
            (@correctors_error_map[error_type] ||= []) << corrector
          end
        end
      end

      def perform(Generation => generation, Node::ProgramNode => root_node, (Prism::ParseResult) => parse_result, MemoPad => memo_pad): bool
        return true if parse_result.errors.empty?

        check_prev_errors(generation, parse_result)
        @previous_error_messages = parse_result.errors.map(&:message)

        parse_result.errors.each do |parse_error|
          correctors = @correctors_error_map[parse_error.type] || next
          correctors.each do |corrector|
            corrector.correct(parse_error, generation, root_node, memo_pad)
          end
        end

        false
      end

      def check_prev_errors(Generation => generation, Prism::ParseResult => parse_result): void
        return if @previous_error_messages.empty?
        return if parse_result.errors.empty?
        return if @previous_error_messages != parse_result.errors.map(&:message)

        message = +""
        parse_result.errors.each do |parse_error|
          message << "\n" unless message.empty?
          message << "#{generation.name}:#{parse_error.location.start_line}:#{parse_error.message} "
          message << "(#{parse_error.type})"
          line = parse_result.source.lines[parse_error.location.start_line - 1]
          if line
            message << "\n#{line.chomp}\n"
            message << "#{" " * parse_error.location.start_column}^#{"~" * [parse_error.location.length - 1, 0].max}"
          end
        end
        raise RubyModKit::SyntaxError, message
      end
    end
  end
end
